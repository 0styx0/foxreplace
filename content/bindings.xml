<?xml version="1.0" encoding="UTF-8"?>
<!-- ***** BEGIN LICENSE BLOCK *****
  -
  - Copyright (C) 2016 Marc Ruiz Altisent. All rights reserved.
  -
  - This file is part of FoxReplace.
  -
  - FoxReplace is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software
  - Foundation, either version 3 of the License, or (at your option) any later version.
  -
  - FoxReplace is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  - A PARTICULAR PURPOSE. See the GNU General Public License for more details.
  -
  - You should have received a copy of the GNU General Public License along with FoxReplace. If not, see <http://www.gnu.org/licenses/>.
  -
  - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings SYSTEM "chrome://foxreplace/locale/bindings.dtd">
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html="http://www.w3.org/1999/xhtml">
  <binding id="inputTextBox">
    <resources>
      <stylesheet src="chrome://foxreplace/skin/bindings.css"/>
    </resources>
    <content onfocus="this.focus();">
      <xul:toolbarbutton anonid="button" class="inputTextBoxButton" type="menu">
        <xul:menupopup inherits="position=menuposition">
          <xul:menuitem class="menuitem-iconic inputTextBoxButtonMenuItem" anonid="itemText" label="&text;"
                        oncommand="document.getBindingParent(this).inputType=document.getBindingParent(this)._fxrCore.Substitution.prototype.INPUT_TEXT;"/>
          <xul:menuitem class="menuitem-iconic inputTextBoxButtonMenuItem" anonid="itemWholeWords" label="&wholeWords;"
                        oncommand="document.getBindingParent(this).inputType=document.getBindingParent(this)._fxrCore.Substitution.prototype.INPUT_WHOLE_WORDS;"/>
          <xul:menuitem class="menuitem-iconic inputTextBoxButtonMenuItem" anonid="itemRegExp" label="&regExp;"
                        oncommand="document.getBindingParent(this).inputType=document.getBindingParent(this)._fxrCore.Substitution.prototype.INPUT_REG_EXP;"/>
        </xul:menupopup>
      </xul:toolbarbutton>
      <xul:vbox pack="center" flex="1">
        <xul:hbox class="inputTextBoxHBox">
          <xul:textbox anonid="textBox" class="inputTextBox" flex="1"/>
        </xul:hbox>
      </xul:vbox>
    </content>
    <implementation>
      <constructor>
        this._fxrCore = {};
        Components.utils.import("chrome://foxreplace/content/core.js", this._fxrCore);
        this.inputType = this._fxrCore.Substitution.prototype.INPUT_TEXT;
      </constructor>
      <field name="_button" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "button")
      </field>
      <field name="_textBox" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "textBox")
      </field>
      <field name="_inputType">
        this._fxrCore.Substitution.prototype.INPUT_TEXT
      </field>
      <property name="value" onget="return this._textBox.value;" onset="this._textBox.value=val;"/>
      <property name="inputType" onget="return this._inputType;">
        <setter>
          <![CDATA[
            if (val < this._fxrCore.Substitution.prototype.INPUT_TEXT) val = this._fxrCore.Substitution.prototype.INPUT_TEXT;
            if (val > this._fxrCore.Substitution.prototype.INPUT_REG_EXP) val = this._fxrCore.Substitution.prototype.INPUT_REG_EXP;
          ]]>
          this._inputType = val;
          this._button.setAttribute("inputtype", val);
          this._textBox.setAttribute("inputtype", val);
          switch (val) {
            case this._fxrCore.Substitution.prototype.INPUT_TEXT: this._textBox.emptyText = "&text;"; break;
            case this._fxrCore.Substitution.prototype.INPUT_WHOLE_WORDS: this._textBox.emptyText = "&wholeWords;"; break;
            case this._fxrCore.Substitution.prototype.INPUT_REG_EXP: this._textBox.emptyText = "&regExp;"; break;
          }
        </setter>
      </property>
      <method name="focus">
        <body>
          if (!this._textBox.hasAttribute("focused")) this._textBox.focus();
        </body>
      </method>
    </implementation>
    <handlers>
      <handler event="keypress" keycode="VK_UP" action="this.inputType--;"/>
      <handler event="keypress" keycode="VK_DOWN" action="this.inputType++;"/>
    </handlers>
  </binding>
  <binding id="htmlButton">
    <content>
      <xul:button anonid="button" type="menu">
        <xul:menupopup inherits="position=menuposition">
          <xul:menuitem label="&htmlNone;"
                        oncommand="document.getBindingParent(this).html=document.getBindingParent(this)._fxrCore.SubstitutionGroup.prototype.HTML_NONE;"/>
          <xul:menuitem label="&htmlOutput;"
                        oncommand="document.getBindingParent(this).html=document.getBindingParent(this)._fxrCore.SubstitutionGroup.prototype.HTML_OUTPUT;"/>
          <xul:menuitem label="&htmlInputOutput;"
                        oncommand="document.getBindingParent(this).html=document.getBindingParent(this)._fxrCore.SubstitutionGroup.prototype.HTML_INPUT_OUTPUT;"/>
        </xul:menupopup>
      </xul:button>
    </content>
    <implementation>
      <constructor>
        this._fxrCore = {};
        Components.utils.import("chrome://foxreplace/content/core.js", this._fxrCore);
        this.html = this._fxrCore.SubstitutionGroup.prototype.HTML_NONE;
      </constructor>
      <field name="_button" readonly="true">
        document.getAnonymousElementByAttribute(this, "anonid", "button")
      </field>
      <field name="_html">
        this._fxrCore.SubstitutionGroup.prototype.HTML_NONE
      </field>
      <property name="html" onget="return this._html;">
        <setter>
          <![CDATA[
            if (val < this._fxrCore.SubstitutionGroup.prototype.HTML_NONE) val = this._fxrCore.SubstitutionGroup.prototype.HTML_NONE;
            if (val > this._fxrCore.SubstitutionGroup.prototype.HTML_INPUT_OUTPUT) val = this._fxrCore.SubstitutionGroup.prototype.HTML_INPUT_OUTPUT;
          ]]>
          this._html = val;
          switch (val) {
            case this._fxrCore.SubstitutionGroup.prototype.HTML_NONE: this._button.label = "&htmlNone;"; break;
            case this._fxrCore.SubstitutionGroup.prototype.HTML_OUTPUT: this._button.label = "&htmlOutput;"; break;
            case this._fxrCore.SubstitutionGroup.prototype.HTML_INPUT_OUTPUT: this._button.label = "&htmlInputOutput;"; break;
          }
        </setter>
      </property>
    </implementation>
    <handlers>
      <handler event="keypress" keycode="VK_UP" action="this.html--;"/>
      <handler event="keypress" keycode="VK_DOWN" action="this.html++;"/>
    </handlers>
  </binding>
</bindings>
